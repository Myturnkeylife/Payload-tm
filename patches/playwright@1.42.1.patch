diff --git a/lib/transform/esmUtils.js b/lib/transform/esmUtils.js
index 3395c09b267883db16723b80593c9429da73e4ed..9aabb6ed66209c75f907897201c777cba2db11d9 100644
--- a/lib/transform/esmUtils.js
+++ b/lib/transform/esmUtils.js
@@ -6,6 +6,8 @@ Object.defineProperty(exports, "__esModule", {
 exports.execArgvWithExperimentalLoaderOptions = execArgvWithExperimentalLoaderOptions;
 exports.execArgvWithoutExperimentalLoaderOptions = execArgvWithoutExperimentalLoaderOptions;
 var _url = _interopRequireDefault(require("url"));
+var _path = _interopRequireDefault(require("path"));
+var _fs = _interopRequireDefault(require("fs"));
 function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
 /**
  * Copyright (c) Microsoft Corporation.
@@ -24,8 +26,21 @@ function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { de
  */
 
 const kExperimentalLoaderOptions = ['--no-warnings', `--experimental-loader=${_url.default.pathToFileURL(require.resolve('playwright/lib/transform/esmLoader')).toString()}`];
+
+
+const absoluteCustomLoaderPath = _path.default.resolve(__dirname, '../../../../../../../packages/payload/src/ðŸ¤®playwright-esm-loader.mjs');
+
 function execArgvWithExperimentalLoaderOptions() {
-  return [...process.execArgv, ...kExperimentalLoaderOptions];
+  console.log('execArgvWithExperimentalLoaderOptions')
+ // check if the custom loader file exists
+  if (!_fs.default.existsSync(absoluteCustomLoaderPath)) {
+      throw new Error(`Could not find custom loader at path: ${absoluteCustomLoaderPath}. Please ensure that the path is correct and that the file exists - otherwise, playwright tests will not run correctly. Dirname: ${__dirname}`);
+  }
+  console.log(`Playwright Patch: Using custom loader at path: ${absoluteCustomLoaderPath}`);
+
+  const kExperimentalLoaderOptions2 = ['--no-warnings', `--experimental-loader=${_url.default.pathToFileURL(require.resolve('playwright/lib/transform/esmLoader')).toString()}`, `--experimental-loader=${absoluteCustomLoaderPath}`];
+
+  return [...process.execArgv, ...kExperimentalLoaderOptions2];
 }
 function execArgvWithoutExperimentalLoaderOptions() {
   return process.execArgv.filter(arg => !kExperimentalLoaderOptions.includes(arg));
